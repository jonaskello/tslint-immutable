// Interface with readonly modifiers should not produce failures
interface Foo {
  readonly a: number,
  readonly b: Array<string>,
  readonly c: () => string,
  readonly d: { readonly [key: string]: string }
  readonly [key: string]: string
}

// PropertySignature and IndexSignature members without readonly modifier should produce failures
interface Foo {
  a: number,
  ~~~~~~~~~~ [failure]
  b: Array<string>,
  ~~~~~~~~~~~~~~~~~ [failure]
  c: () => string,
  ~~~~~~~~~~~~~~~~[failure]
  d: { [key: string]: string },
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]
       ~~~~~~~~~~~~~~~~~~~~~ [failure]
  [key: string]: string,
  ~~~~~~~~~~~~~~~~~~~~~~ [failure]
  // Also verify that nested members are checked
  readonly d: {
    a: number,
    ~~~~~~~~~~ [failure]
    b: Array<string>,
    ~~~~~~~~~~~~~~~~~ [failure]
    c: () => string,
    ~~~~~~~~~~~~~~~~[failure]
    d: { [key: string]: string },
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]
         ~~~~~~~~~~~~~~~~~~~~~ [failure]
    [key: string]: string,
    ~~~~~~~~~~~~~~~~~~~~~~ [failure]
  }
}

// CallSignature and MethodSignature cannot have readonly modifiers and should not produce failures
export interface Zoo {
  (): void
  foo(): void
}

// Local PropertySignature and IndexSignature members without readonly modifier should not produce failures
function foo() {
  interface Foo {
    a: number,
    b: Array<string>,
    c: () => string,
    [key: string]: string,
    readonly d: {
      a: number,
      b: Array<string>,
      c: () => string,
      [key: string]: string,
    }
  }
}



[failure]: A readonly modifier is required.
