const x = {a: 1};

// Disallowed object mutation patterns

x.foo = 'bar';
~~~~~~~~~~~~~ [failure]

x['foo'] = 'bar';
~~~~~~~~~~~~~~~~ [failure]

x.a += 1;
~~~~~~~~ [failure]

x.a -= 1;
~~~~~~~~ [failure]

x.a *= 1;
~~~~~~~~ [failure]

x.a **= 1;
~~~~~~~~~ [failure]

x.a /= 1;
~~~~~~~~ [failure]

x.a %= 1;
~~~~~~~~ [failure]

x.a <<= 1;
~~~~~~~~~ [failure]

x.a >>= 1;
~~~~~~~~~ [failure]

x.a >>>= 1;
~~~~~~~~~~ [failure]

x.a &= 1;
~~~~~~~~ [failure]

x.a |= 1;
~~~~~~~~ [failure]

x.a ^= 1;
~~~~~~~~ [failure]

delete x.a;
~~~~~~~~~~ [failure]

delete x['a'];
~~~~~~~~~~~~~ [failure]

x.a++;
~~~~~ [failure]

x.a--;
~~~~~ [failure]

++x.a;
~~~~~ [failure]

--x.a;
~~~~~ [failure]

if (x.a = 2) {}
    ~~~~~~~ [failure]

if (x.a++) {}
    ~~~~~ [failure]


// Non-mutating patterns that we shouldn't catch

const y = x.a;
const z = x['a'];
if (x.a && y.a) {}
const w = ~x.a;
if (!x.a) {}

// Allow initialization of class members in constructor

class Foo {
    readonly bar = 1;
    readonly baz: string;
    constructor() {
      this.baz = "hello";
    }
    zoo() {
        this.bar = 2;
        ~~~~~~~~~~~~ [failure]
        this.baz = 3;
        ~~~~~~~~~~~~ [failure]
    }
}

// Disallow Object.assign() on identifiers.

const value = { msg1: 'hello' };

const foo = Object.assign(value, { msg2: 'world' });
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]

// Allow Object.assign() on non identifiers

const bar = (a, b, c) => ({a, b, c});

const foo = Object.assign({}, { msg: 'hello world' });
const foo = Object.assign({ ...value }, { msg2: 'world' });
const foo = Object.assign(bar(1, 2, 3), { d: 4 });

[failure]: Modifying properties of existing object not allowed.
