// Function Declarations

function foo(...numbers: ReadOnlyArray<number>): ReadOnlyArray<number> {
}

function foo(...numbers: Array<number>): ReadOnlyArray<number> {
                         ~~~~~~~~~~~~~ [Only ReadonlyArray allowed.]
}

function foo(...numbers: ReadOnlyArray<number>): Array<number> {
}

function foo(...numbers: Array<number>): Array<number> {
                         ~~~~~~~~~~~~~ [Only ReadonlyArray allowed.]
}

function foo(...numbers: ReadOnlyArray<number>): number[] {
}

function foo(...numbers: number[]): number[] {
                         ~~~~~~~~ [Only ReadonlyArray allowed.]
}



// Function Expressions

const foo = function(...numbers: ReadOnlyArray<number>): ReadOnlyArray<number> {
}

const foo = function(...numbers: Array<number>): ReadOnlyArray<number> {
                                 ~~~~~~~~~~~~~ [Only ReadonlyArray allowed.]
}

const foo = function(...numbers: ReadOnlyArray<number>): Array<number> {
}

const foo = function(...numbers: Array<number>): Array<number> {
                                 ~~~~~~~~~~~~~ [Only ReadonlyArray allowed.]
}

const foo = function(...numbers: ReadOnlyArray<number>): number[] {
}

const foo = function(...numbers: number[]): number[] {
                                 ~~~~~~~~ [Only ReadonlyArray allowed.]
}



// Arrow Functions

const foo = (...numbers: ReadOnlyArray<number>): ReadOnlyArray<number> =>  {
}

const foo = (...numbers: Array<number>): ReadOnlyArray<number> =>  {
                         ~~~~~~~~~~~~~ [Only ReadonlyArray allowed.]
}

const foo = (...numbers: ReadOnlyArray<number>): Array<number> =>  {
}

const foo = (...numbers: Array<number>): Array<number> =>  {
                         ~~~~~~~~~~~~~ [Only ReadonlyArray allowed.]
}

const foo = (...numbers: ReadOnlyArray<number>): number[] => {
}

const foo = (...numbers: number[]): number[] => {
                         ~~~~~~~~ [Only ReadonlyArray allowed.]
}



// Method Declarations

class Test {
  foo(...numbers: ReadonlyArray<number>): number[] {
  }

  foo(...numbers: ReadonlyArray<number>): Array<number> {
  }

  foo(...numbers: ReadonlyArray<number>): ReadOnlyArray<number> {
  }

  foo(...numbers: number[]): number[] {
                  ~~~~~~~~    [Only ReadonlyArray allowed.]
  }

  foo(...numbers: number[]): Array<number> {
                  ~~~~~~~~    [Only ReadonlyArray allowed.]
  }

  foo(...numbers: number[]): ReadOnlyArray<number> {
                  ~~~~~~~~    [Only ReadonlyArray allowed.]
  }

  foo(...numbers: Array<number>): number[] {
                  ~~~~~~~~~~~~~    [Only ReadonlyArray allowed.]
  }

  foo(...numbers: Array<number>): Array<number> {
                  ~~~~~~~~~~~~~    [Only ReadonlyArray allowed.]
  }

  foo(...numbers: Array<number>): ReadOnlyArray<number> {
                  ~~~~~~~~~~~~~    [Only ReadonlyArray allowed.]
  }
}



// Type Arguments

function foo(...numbers: ReadOnlyArray<number>): Promise<Array<number>> {
}

function foo(...numbers: ReadOnlyArray<number>): Promise<number[]> {
}


// Deep Type Arguments

function foo(...numbers: ReadOnlyArray<number>): Promise<ReadOnlyArray<Array<number>>> {
}

function foo(...numbers: ReadOnlyArray<number>): Promise<ReadOnlyArray<number[]>> {
}


// Tuples

function foo(...numbers: ReadOnlyArray<number>): readonly [number, Array<number>, number] {
}

function foo(...numbers: ReadOnlyArray<number>): readonly [number, number[], number] {
}


// Union Types

function foo(...numbers: ReadOnlyArray<number>): { a: Array<number> } | { b: string[] } {
}


// Intersection Types

function foo(...numbers: ReadOnlyArray<number>): { a: Array<number> } & { b: string[] } {
}


// Conditional Types

function foo<T>(x: T): T extends Array<number> ? string : number[] {
}
