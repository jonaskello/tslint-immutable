// -- Top-level interface declarations

// Should fail on Array type in interface (TypeReferenceNode)
interface Foo {
  bar: ReadonlyArray<string>
}

// Should fail on Array type in index interface
interface Foo { [key: string]: { groups: ReadonlyArray<string> } }

// -- Local interface declarations

function foo(): ReadonlyArray<string> {

  // Should fail on Array type in interface (TypeReferenceNode)
  interface Foo {
    bar: ReadonlyArray<string>
  }

}

const foo = (): ReadonlyArray<string> => {

  // Should fail on Array type in interface (TypeReferenceNode)
  interface Foo {
    bar: ReadonlyArray<string>
  }

}

// Should fail on shorthand syntax Array type as return type
function foo(): ReadonlyArray<number> {
}

// Should fail on shorthand syntax Array type as return type
const foo = (): ReadonlyArray<number> => {
}

function foo(): ReadonlyArray<number> {

  // Should not fail on explicit ReadonlyArray return type
  return [1, 2, 3];

}

const foo = (): ReadonlyArray<number> => {

  // Should not fail on explicit ReadonlyArray return type
  return [1, 2, 3];

}

// Should fail inside function
const foo = function (): string {
  let bar: ReadonlyArray<string>;
};

// Assignment to overridden array
interface SomeType {
  array: Array<string>; // tslint:disable-line:readonly-array
}
const o: SomeType = {
    array: [""],
}

