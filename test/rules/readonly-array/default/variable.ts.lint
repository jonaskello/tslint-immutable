// -- Top-level variable declarations

// Should not fail on ReadonlyArray in variable declaration (TypeReferenceNode)
const foo: ReadonlyArray<string> = [];

// Should fail on Array type in variable declaration (TypeReferenceNode)
const foo: Array<string> = [];
           ~~~~~~~~~~~~~ [failure]

// Should fail on implicit Array type in variable declaration (ArrayLiteralExpression)
const foo = [1, 2, 3]
      ~~~ [failure]

// Should fail on shorthand Array syntax
const foo: number[] = [1, 2, 3];
           ~~~~~~~~ [failure]

// Should fail on Array type being used as template param
let x: Foo<Array<string>>;
           ~~~~~~~~~~~~~ [failure]

// Should fail on nested type arguments
let x: Array<Array<Array<string>>>;
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]
             ~~~~~~~~~~~~~~~~~~~~ [failure]
                   ~~~~~~~~~~~~~ [failure]

// Should fail on nested shorthand arrayss
let x: string[][][];
       ~~~~~~~~~~~~ [failure]
       ~~~~~~~~~~ [failure]
       ~~~~~~~~ [failure]

// -- Local variable declarations

// Should fail on Array type in variable declaration as function parameter (TypeReferenceNode)
function foo(bar: Array<string>, zoo: ReadonlyArray<string>, boo = [1, 2, 3], soo: number[]) {
                  ~~~~~~~~~~~~~ [failure]
                                                             ~~~ [failure]
                                                                                   ~~~~~~~~ [failure]

  // Should not fail on ReadonlyArray in variable declaration (TypeReferenceNode)
  const foo: ReadonlyArray<string> = [];

  // Should fail on Array type in variable declaration (TypeReferenceNode)
  const foo: Array<string> = [];
             ~~~~~~~~~~~~~ [failure]

  // Should fail on implicit Array type in variable declaration (ArrayLiteralExpression)
  const foo = [1, 2, 3]
        ~~~ [failure]
}

// Should fail on Array type in variable declaration as function parameter (TypeReferenceNode)
const foo = (bar: Array<string>, zoo: ReadonlyArray<string>, boo = [1, 2, 3], soo: number[]) => {
                  ~~~~~~~~~~~~~ [failure]
                                                             ~~~ [failure]
                                                                                   ~~~~~~~~ [failure]

  // Should not fail on ReadonlyArray in variable declaration (TypeReferenceNode)
  const foo: ReadonlyArray<string> = [];

  // Should fail on Array type in variable declaration (TypeReferenceNode)
  const foo: Array<string> = [];
             ~~~~~~~~~~~~~ [failure]

  // Should fail on implicit Array type in variable declaration (ArrayLiteralExpression)
  const foo = [1, 2, 3]
        ~~~ [failure]

}

[failure]: Only ReadonlyArray allowed.
