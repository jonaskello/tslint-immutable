// -- Top-level variable declarations

// Should not fail on ReadonlyArray in variable declaration (TypeReferenceNode)
const foo: ReadonlyArray<string> = [];

// Should fail on Array type in variable declaration (TypeReferenceNode)
const foo: ReadonlyArray<string> = [];

// Should fail on implicit Array type in variable declaration (ArrayLiteralExpression)
const foo: ReadonlyArray<any> = [1, 2, 3]

// Should fail on shorthand Array syntax
const foo: ReadonlyArray<number> = [1, 2, 3];

// Should fail on Array type being used as template param
let x: Foo<ReadonlyArray<string>>;

// Should fail on nested type arguments
let x: ReadonlyArray<ReadonlyArray<ReadonlyArray<string>>>;

// Should fail on nested shorthand arrayss
let x: ReadonlyArray<ReadonlyArray<ReadonlyArray<string>>>;

// -- Local variable declarations

// Should fail on Array type in variable declaration as function parameter (TypeReferenceNode)
function foo(bar: ReadonlyArray<string>, zoo: ReadonlyArray<string>, boo: ReadonlyArray<any> = [1, 2, 3], soo: ReadonlyArray<number>) {

  // Should not fail on ReadonlyArray in variable declaration (TypeReferenceNode)
  const foo: ReadonlyArray<string> = [];

  // Should fail on Array type in variable declaration (TypeReferenceNode)
  const foo: ReadonlyArray<string> = [];

  // Should fail on implicit Array type in variable declaration (ArrayLiteralExpression)
  const foo: ReadonlyArray<any> = [1, 2, 3]
}

// Should fail on Array type in variable declaration as function parameter (TypeReferenceNode)
const foo = (bar: ReadonlyArray<string>, zoo: ReadonlyArray<string>, boo: ReadonlyArray<any> = [1, 2, 3], soo: ReadonlyArray<number>) => {

  // Should not fail on ReadonlyArray in variable declaration (TypeReferenceNode)
  const foo: ReadonlyArray<string> = [];

  // Should fail on Array type in variable declaration (TypeReferenceNode)
  const foo: ReadonlyArray<string> = [];

  // Should fail on implicit Array type in variable declaration (ArrayLiteralExpression)
  const foo: ReadonlyArray<any> = [1, 2, 3]

}

