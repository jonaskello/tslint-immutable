// -- Top-level type literal

// Should fail on Array as type literal member (TypeReferenceNode)
let foo: { bar: Array<string> };
                ~~~~~~~~~~~~~ [failure]

// Should not fail on Array as type literal member with prefix (TypeReferenceNode)
let foo: { mutableBar: Array<string> };

// Check shorthand syntax as well
let foo: { mutableBar: string[] };

// -- Local type literal

// Should fail on Array as type literal member as function parameter (TypeReferenceNode)
function foo(param1: { bar: Array<string>, boo: ReadonlyArray<string> }) {
                            ~~~~~~~~~~~~~ [failure]

  // Should fail on Array as type literal member (TypeReferenceNode)
  let foo: { bar: Array<string> };
                  ~~~~~~~~~~~~~ [failure]

  // Should not fail on Array as type literal member with prefix (TypeReferenceNode)
  let foo: { mutableBar: Array<string> };

}

// Should fail on Array as type literal member as function parameter (TypeReferenceNode)
const foo = (param1: { bar: Array<string>, boo: ReadonlyArray<string> }) => {
                            ~~~~~~~~~~~~~ [failure]

  // Should fail on Array as type literal member (TypeReferenceNode)
  let foo: { bar: Array<string> };
                  ~~~~~~~~~~~~~ [failure]

  // Should not fail on Array as type literal member with prefix (TypeReferenceNode)
  let foo: { mutableBar: Array<string> };

}

[failure]: Only ReadonlyArray allowed.
