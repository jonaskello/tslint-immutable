// -- Top-level variable declarations

// Should not fail on ReadonlyArray in variable declaration (TypeReferenceNode)
const foo: ReadonlyArray<string> = [];

// Should fail on Array type in variable declaration (TypeReferenceNode)
const foo: Array<string> = [];
           ~~~~~~~~~~~~~ [failure]

// Should not fail on Array type in variable declaration with prefix (TypeReferenceNode)
const a: Array<string> = [];

// Should fail on implicit Array type in variable declaration (ArrayLiteralExpression)
const foo = [1, 2, 3]
      ~~~ [failure]

// Should not fail on implicit Array type in variable declaration with prefix (ArrayLiteralExpression)
const a = [1, 2, 3]

// -- Local variable declarations

// Should fail on Array type in variable declaration as function parameter (TypeReferenceNode)
function foo(bar: Array<string>, zoo: ReadonlyArray<string>, boo = [1, 2, 3], a: Array<string>) {
                  ~~~~~~~~~~~~~ [failure]
                                                             ~~~ [failure]

  // Should not fail on ReadonlyArray in variable declaration (TypeReferenceNode)
  const foo: ReadonlyArray<string> = [];

  // Should fail on Array type in variable declaration (TypeReferenceNode)
  const foo: Array<string> = [];
             ~~~~~~~~~~~~~ [failure]

  // Should not fail on Array type in variable declaration with prefix (TypeReferenceNode)
  const a: Array<string> = [];

  // Should fail on implicit Array type in variable declaration (ArrayLiteralExpression)
  const foo = [1, 2, 3]
        ~~~ [failure]

  // Should not fail on implicit Array type in variable declaration with prefix (ArrayLiteralExpression)
  const a = [1, 2, 3]

}

// Should fail on Array type in variable declaration as function parameter (TypeReferenceNode)
const foo = (bar: Array<string>, zoo: ReadonlyArray<string>, boo = [1, 2, 3], a: Array<string>) => {
                  ~~~~~~~~~~~~~ [failure]
                                                             ~~~ [failure]

  // Should not fail on ReadonlyArray in variable declaration (TypeReferenceNode)
  const foo: ReadonlyArray<string> = [];

  // Should fail on Array type in variable declaration (TypeReferenceNode)
  const foo: Array<string> = [];
             ~~~~~~~~~~~~~ [failure]

  // Should not fail on Array type in variable declaration with prefix (TypeReferenceNode)
  const a: Array<string> = [];

  // Should fail on implicit Array type in variable declaration (ArrayLiteralExpression)
  const foo = [1, 2, 3]
        ~~~ [failure]

  // Should not fail on implicit Array type in variable declaration with prefix (ArrayLiteralExpression)
  const a = [1, 2, 3]

}

[failure]: Only ReadonlyArray allowed.
