const x = [0, 1, 2];
const y = [[0], [1]];

// Disallowed array mutation patterns

x[0] = 4;
~~~~~~~~ [failure]
y[0][0] = 4;
~~~~~~~~~~~ [failure]

x[0] += 1;
~~~~~~~~~ [failure]
y[0][0] += 1;
~~~~~~~~~~~~ [failure]

x[0] -= 1;
~~~~~~~~~ [failure]
y[0][0] -= 1;
~~~~~~~~~~~~ [failure]

x[0] *= 1;
~~~~~~~~~ [failure]
y[0][0] *= 1;
~~~~~~~~~~~~ [failure]

x[0] **= 1;
~~~~~~~~~~ [failure]
y[0][0] **= 1;
~~~~~~~~~~~~~ [failure]

x[0] /= 1;
~~~~~~~~~ [failure]
y[0][0] /= 1;
~~~~~~~~~~~~ [failure]

x[0] %= 1;
~~~~~~~~~ [failure]
y[0][0] %= 1;
~~~~~~~~~~~~ [failure]

x[0] <<= 1;
~~~~~~~~~~ [failure]
y[0][0] <<= 1;
~~~~~~~~~~~~~ [failure]

x[0] >>= 1;
~~~~~~~~~~ [failure]
y[0][0] >>= 1;
~~~~~~~~~~~~~ [failure]

x[0] >>>= 1;
~~~~~~~~~~~ [failure]
y[0][0] >>>= 1;
~~~~~~~~~~~~~~ [failure]

x[0] &= 1;
~~~~~~~~~ [failure]
y[0][0] &= 1;
~~~~~~~~~~~~ [failure]

x[0] |= 1;
~~~~~~~~~ [failure]
y[0][0] |= 1;
~~~~~~~~~~~~ [failure]

x[0] ^= 1;
~~~~~~~~~ [failure]
y[0][0] ^= 1;
~~~~~~~~~~~~ [failure]

delete x[0];
~~~~~~~~~~~ [failure]
delete y[0][0];
~~~~~~~~~~~~~~ [failure]

x[0]++;
~~~~~~ [failure]
y[0][0]++;
~~~~~~~~~ [failure]

x[0]--;
~~~~~~ [failure]
y[0][0]--;
~~~~~~~~~ [failure]

++x[0];
~~~~~~ [failure]
++y[0][0];
~~~~~~~~~ [failure]

--x[0];
~~~~~~ [failure]
--y[0][0];
~~~~~~~~~ [failure]

if (x[0] = 2) {}
    ~~~~~~~~ [failure]
if (y[0][0] = 2) {}
    ~~~~~~~~~~~ [failure]

if (x[0]++) {}
    ~~~~~~ [failure]
if (y[0][0]++) {}
    ~~~~~~~~~ [failure]

x.length = 1;
~~~~~~~~~~~~ [failure]
y[0].length = 1;
~~~~~~~~~~~~~~~ [failure]

// Allowed non-array mutation patterns

const u = () => {};
const v = {
  x: 1,
  y: u
};
let a = 0;

a = 4;
a += 1;
a -= 1;
a *= 1;
a **= 1;
a /= 1;
a %= 1;
a <<= 1;
a >>= 1;
a >>>= 1;
a &= 1;
a |= 1;
a ^= 1;
delete a;
a++;
a--;
++a;
--a;
if (a = 2) {}
if (a++) {}

v.x = 2;
v.x++;
--v.x;
delete v.x

// Disallowed array mutation methods

x.copyWithin(0, 1, 2);
~~~~~~~~~~~~~~~~~~~~~ [failure]
y[0].copyWithin(0, 1, 2);
~~~~~~~~~~~~~~~~~~~~~~~~ [failure]

x.fill(3);
~~~~~~~~~ [failure]
y[0].fill(3);
~~~~~~~~~~~~ [failure]

x.pop();
~~~~~~~ [failure]
y[0].pop();
~~~~~~~~~~ [failure]

x.push(3);
~~~~~~~~~ [failure]
y[0].push(3);
~~~~~~~~~~~~ [failure]

x.reverse();
~~~~~~~~~~~ [failure]
y[0].reverse();
~~~~~~~~~~~~~~ [failure]

x.shift();
~~~~~~~~~ [failure]
y[0].shift();
~~~~~~~~~~~~ [failure]

x.sort();
~~~~~~~~ [failure]
y[0].sort();
~~~~~~~~~~~ [failure]

x.splice(0, 1, 9);
~~~~~~~~~~~~~~~~~ [failure]
y[0].splice(0, 1, 9);
~~~~~~~~~~~~~~~~~~~~ [failure]

x.unshift(6);
~~~~~~~~~~~~ [failure]
y[0].unshift(6);
~~~~~~~~~~~~~~~ [failure]

// Allow array non-mutation methods

x.concat([3, 4]);
x.includes(2);
x.indexOf(1);
x.join(', ');
x.lastIndexOf(0);
x.slice(1, 2);
x.toString();
x.toLocaleString("en", {timeZone: "UTC"});

y[0].concat([3, 4]);
y[0].includes(2);
y[0].indexOf(1);
y[0].join(', ');
y[0].lastIndexOf(0);
y[0].slice(1, 2);
y[0].toString();
y[0].toLocaleString("en", {timeZone: "UTC"});

// Disallowed array mutation methods to be chained to new array methods without that option being set.

x.slice().copyWithin(0, 1, 2);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]
y[0].slice().copyWithin(0, 1, 2);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]

x.slice().fill(3);
~~~~~~~~~~~~~~~~~ [failure]
y[0].slice().fill(3);
~~~~~~~~~~~~~~~~~~~~ [failure]

x.slice().pop();
~~~~~~~~~~~~~~~ [failure]
y[0].slice().pop();
~~~~~~~~~~~~~~~~~~ [failure]

x.slice().push(3);
~~~~~~~~~~~~~~~~~ [failure]
y[0].slice().push(3);
~~~~~~~~~~~~~~~~~~~~ [failure]

x.slice().reverse();
~~~~~~~~~~~~~~~~~~~ [failure]
y[0].slice().reverse();
~~~~~~~~~~~~~~~~~~~~~~ [failure]

x.slice().shift();
~~~~~~~~~~~~~~~~~ [failure]
y[0].slice().shift();
~~~~~~~~~~~~~~~~~~~~ [failure]

x.slice().sort();
~~~~~~~~~~~~~~~~ [failure]
y[0].slice().sort();
~~~~~~~~~~~~~~~~~~~ [failure]

x.slice().splice(0, 1, 9);
~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]
y[0].slice().splice(0, 1, 9);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]

x.slice().unshift(6);
~~~~~~~~~~~~~~~~~~~~ [failure]
y[0].slice().unshift(6);
~~~~~~~~~~~~~~~~~~~~~~~ [failure]



x.concat([1, 2, 3]).copyWithin(0, 1, 2);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]
y[0].concat([1, 2, 3]).copyWithin(0, 1, 2);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]

x.concat([1, 2, 3]).fill(3);
~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]
y[0].concat([1, 2, 3]).fill(3);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]

x.concat([1, 2, 3]).pop();
~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]
y[0].concat([1, 2, 3]).pop();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]

x.concat([1, 2, 3]).push(3);
~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]
y[0].concat([1, 2, 3]).push(3);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]

x.concat([1, 2, 3]).reverse();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]
y[0].concat([1, 2, 3]).reverse();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]

x.concat([1, 2, 3]).shift();
~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]
y[0].concat([1, 2, 3]).shift();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]

x.concat([1, 2, 3]).sort();
~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]
y[0].concat([1, 2, 3]).sort();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]

x.concat([1, 2, 3]).splice(0, 1, 9);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]
y[0].concat([1, 2, 3]).splice(0, 1, 9);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]

x.concat([1, 2, 3]).unshift(6);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]
y[0].concat([1, 2, 3]).unshift(6);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ [failure]

// Allow other functions and methods
u();
v.y();

// Don't catch calls of array mutation methods on non-array objects

const z = {
  length: 5,
  copyWithin: () => {},
  fill: () => {},
  pop: () => {},
  push: () => {},
  reverse: () => {},
  shift: () => {},
  sort: () => {},
  splice: () => {},
  unshift: () => {}
};

z.length = 7;
z.copyWithin();
z.fill();
z.pop();
z.push();
z.reverse();
z.shift();
z.sort();
z.splice();
z.unshift();

[failure]: Mutating an array is not allowed.
